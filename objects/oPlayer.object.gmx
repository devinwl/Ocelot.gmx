<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

grav = 0.7;
movespeed = 6;
jumpspeed = 11;
hspd = 0;
vspd = 0;
grabbingLedge = false;

// Sprites
sRunSpeed = 0.17;

// Limbs and such
renderParts = 1;

// Weapons
equippedWeapon = 0;

// Create view
instance_create(x,y,oView);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics

var rKey = keyboard_check(ord("D"));
var lKey = -keyboard_check(ord("A"));
var jKey = keyboard_check_pressed(vk_space);
var maxVSpeed = 10;

// React to inputs
var move = rKey + lKey;
hspd = move * movespeed;

if(vspd &lt; maxVSpeed &amp;&amp; !grabbingLedge) {
    vspd += grav;
}

// Player grounded?
if(place_meeting(x, y+1, oWall)) {
    vspd = jKey * -jumpspeed;
}

// Horizontal collision
if(place_meeting(x+hspd, y, oWall)) {
    while(!place_meeting(x+sign(hspd), y, oWall)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Vertical collision
if(place_meeting(x, y+vspd, oWall)) {
    while(!place_meeting(x, y+sign(vspd), oWall)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Ledge mechanics
if(place_meeting(x+1, y, oLedge)) {
    grabbingLedge = true;
    vspd = 0;
}

// Apply speed changes
x += hspd;
y += vspd;

if(mouse_check_button_pressed(mb_left)) {
    bullet = instance_create(x,y,oBullet);
    bullet.direction = point_direction(x,y,mouse_x,mouse_y);
    bullet.hspd = lengthdir_x(bullet.bulletVelocity, bullet.direction);
    bullet.vspd = lengthdir_y(bullet.bulletVelocity, bullet.direction);
    bullet.image_angle = point_direction(x,y,mouse_x,mouse_y);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Powerups

// Gun
if(place_meeting(x,y,oGun)) {
    gunObj = instance_place(x,y,oGun);
    equippedWeapon = oGun;
    with (gunObj) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Draw

// Render self
draw_self();

// Getting mouse position relative to player

// FIX ME: CALCULATE MOUSE ANGLE/DELTA RELATIVE TO CENTER OF VIEW FOR BETTER AIMING (PROBABLY)
mouseAngle = point_direction(x,y,mouse_x,mouse_y)
mouseDelta = sign(mouse_x - x);
if(mouseDelta == 0) mouseDelta = 1; // Player needs to be always visible

// State variables
renderLimbs = oPlayer.renderParts;
playerGrounded = place_meeting(x,y+1,oWall);

// Bone joints
headOriginX = x - (image_xscale * 1);
headOriginY = y - 13;

rightArmOriginX = x - (image_xscale * 4);
rightArmOriginY = y - 11;
leftArmOriginX = rightArmOriginX;
leftArmOriginY = rightArmOriginY;

rightHandOriginX = rightArmOriginX + (image_xscale * 10);
rightHandOriginY = rightArmOriginY;
leftHandOriginX = leftArmOriginX;
leftHandOriginY = leftArmOriginY;

legsOriginX = x;
legsOriginY = y - 2;

// Sprites
headSprite = sPlayerHead;
rightArmSprite = sPlayerRightArm;
leftArmSprite = sPlayerLeftArm;
legsSprite = sPlayerLegs;

// Player states
PLAYER_IDLE = 0;
PLAYER_RUNNING = 1;
PLAYER_JUMP_START = 2;
PLAYER_JUMP_MID = 3;
PLAYER_JUMP_FALLING = 4;
PLAYER_JUMP_FALLING_FAST = 5;

playerState = PLAYER_IDLE;

// Determine Player state
if(hspd != 0 &amp;&amp; playerGrounded) {
    playerState = PLAYER_RUNNING;
}
else if(vspd &lt;= -2 &amp;&amp; !playerGrounded) {
    playerState = PLAYER_JUMP_START;
}
else if(vspd &lt;= 0 &amp;&amp; vspd &gt;= -2 &amp;&amp; !playerGrounded) {
    playerState = PLAYER_JUMP_MID;
}
else if(vspd &gt;= 0 &amp;&amp; vspd &lt; 3 &amp;&amp; !playerGrounded) {
    playerState = PLAYER_JUMP_FALLING;
}
else if(vspd &gt;= 3 &amp;&amp; !playerGrounded) {
    playerState = PLAYER_JUMP_FALLING_FAST;
}

/* How the Player is Rendered:
1) Render Torso Step
1a) Update joint locations
1b) Render Torso
2) Render Head
3) Render Arms Step
3a) Render Hands (held items)
3b) Render Arms
4) Render Legs
END
*/

if(renderLimbs) {

    // ------------
    // Render Torso
    // ------------
    
    torsoFrame = 0;
    //image_speed = 0;
    
    // If player in the middle of a jump
    // Assumes jump_start ---&gt; jump_falling_fast transition ascends
    if(playerState &gt;= PLAYER_JUMP_START &amp;&amp; playerState &lt;= PLAYER_JUMP_FALLING_FAST) {
        sprite_index = sPlayerTorsoJumping;
        image_speed = 0;
    }
    
    // Set frame from state
    if(playerState == PLAYER_JUMP_MID) {
        image_index = 1;
    }
    
    if(playerState == PLAYER_JUMP_FALLING) {
        image_index = 2;
    }
    
    if(playerState == PLAYER_JUMP_FALLING_FAST) {
        image_index = 3;
    }
    
    if(playerState == PLAYER_RUNNING) {
        sprite_index = sPlayerTorsoRunning;
        image_speed = sRunSpeed;
    }
    
    if(playerState = PLAYER_IDLE) {
        sprite_index = sPlayer;
    }
    
    // Update joints
    if(playerState == PLAYER_JUMP_START || playerState == PLAYER_JUMP_MID) {
        rightArmOriginX += (image_xscale * 1);
        leftArmOriginX += (image_xscale * 1);  
    }
    else if(playerState == PLAYER_JUMP_FALLING_FAST) {
        rightArmOriginX -= (image_xscale * 1);
        leftArmOriginX -= (image_xscale * 1);
    }
    
    // ----------------
    // End Torso Render
    // ----------------
       

    // -----------
    // Render Head
    // -----------
    
    headFrame = 0;
    
    // Draw head at correct angle
    if(image_xscale == 1) {
        if(mouseAngle &gt; 20 &amp;&amp; mouseAngle &lt;= 110) headFrame = 1;
        if(mouseAngle &gt; 110 &amp;&amp; mouseAngle &lt;= 160) headFrame = 2;
        if(mouseAngle &gt; 160 &amp;&amp; mouseAngle &lt;= 200) headFrame = 3;
        if(mouseAngle &gt; 200 &amp;&amp; mouseAngle &lt;= 270) headFrame = 4;
        if(mouseAngle &gt; 270 &amp;&amp; mouseAngle &lt;= 340) headFrame = 5;
    }
    else {
        headFrame = 3;
        if(mouseAngle &gt; 20 &amp;&amp; mouseAngle &lt;= 70) headFrame = 2;
        if(mouseAngle &gt; 70 &amp;&amp; mouseAngle &lt;= 160) headFrame = 1;
        if(mouseAngle &gt; 160 &amp;&amp; mouseAngle &lt;= 200) headFrame = 0;
        if(mouseAngle &gt; 200 &amp;&amp; mouseAngle &lt;= 270) headFrame = 5;
        if(mouseAngle &gt; 270 &amp;&amp; mouseAngle &lt;= 340) headFrame = 4;
    }
    
    // Draw that head
    draw_sprite_ext(sPlayerHead,headFrame,headOriginX,headOriginY,image_xscale,1,1,c_white,1);
    
    // ---------------
    // End Head Render
    // ---------------
    
    // -----------
    // Render Arms
    // -----------
    
    armFrame = 0;
    
    if(image_xscale == 1) {
        if(mouseAngle &gt; 20 &amp;&amp; mouseAngle &lt;= 70) armFrame = 1;
        if(mouseAngle &gt; 70 &amp;&amp; mouseAngle &lt;= 110) armFrame = 2;
        if(mouseAngle &gt; 110 &amp;&amp; mouseAngle &lt;= 160) armFrame = 3;
        if(mouseAngle &gt; 160 &amp;&amp; mouseAngle &lt;= 200) armFrame = 4;
        if(mouseAngle &gt; 200 &amp;&amp; mouseAngle &lt;= 250) armFrame = 5;
        if(mouseAngle &gt; 250 &amp;&amp; mouseAngle &lt;= 290) armFrame = 6;
        if(mouseAngle &gt; 290 &amp;&amp; mouseAngle &lt;= 340) armFrame = 7;
    }
    else {
        armFrame = 4;
        if(mouseAngle &gt; 20 &amp;&amp; mouseAngle &lt;= 70) armFrame = 3;
        if(mouseAngle &gt; 70 &amp;&amp; mouseAngle &lt;= 110) armFrame = 2;
        if(mouseAngle &gt; 110 &amp;&amp; mouseAngle &lt;= 160) armFrame = 1;
        if(mouseAngle &gt; 160 &amp;&amp; mouseAngle &lt;= 200) armFrame = 0;
        if(mouseAngle &gt; 200 &amp;&amp; mouseAngle &lt;= 250) armFrame = 7;
        if(mouseAngle &gt; 250 &amp;&amp; mouseAngle &lt;= 290) armFrame = 6;
        if(mouseAngle &gt; 290 &amp;&amp; mouseAngle &lt;= 340) armFrame = 5;
    }
    
    // ------------
    // Render Hands
    // ------------
    
    draw_sprite_ext(sGun,0,rightHandOriginX,rightHandOriginY,image_xscale,1,1,c_white,1);
    
    // ----------------
    // End Hands Render
    // ----------------
    
    draw_sprite_ext(sPlayerRightArm,armFrame,rightArmOriginX,rightArmOriginY,image_xscale,1,1,c_white,1);
    draw_sprite_ext(sPlayerLeftArm,armFrame,leftArmOriginX,leftArmOriginY,image_xscale,1,1,c_white,1);
    
    // ---------------
    // End Arms Render
    // ---------------
    
    // -----------
    // Render Legs
    // -----------
    
    legFrame = 0;
    legSprite = sPlayerLegs;
    
    // If player in the middle of a jump
    // Assumes jump_start ---&gt; jump_falling_fast transition ascends
    if(playerState &gt;= PLAYER_JUMP_START &amp;&amp; playerState &lt;= PLAYER_JUMP_FALLING_FAST) {
        legSprite = sPlayerLegsJumping;
    }
    
    // Set frame from state
    if(playerState == PLAYER_JUMP_MID) {
        legFrame = 1;
    }
    
    if(playerState == PLAYER_JUMP_FALLING) {
        legFrame = 2;
    }
    
    if(playerState == PLAYER_JUMP_FALLING_FAST) {
        legFrame = 3;
    }
    
    if(playerState == PLAYER_RUNNING) {
        legSprite = sPlayerLegsRunning;
        legFrame = -1;
    }
    
    draw_sprite_ext(legSprite,legFrame,legsOriginX,legsOriginY,image_xscale,1,1,c_white,1);
    
    // ---------------
    // End Render Legs
    // ---------------
}

// Set facing direction
if(hspd &gt; 0) {
    image_xscale = 1;
}
if(hspd &lt; 0) {
    image_xscale = -1;
}


// Debugging
//draw_text(x,y,"weap:" + string(oPlayer.activeWeapon));
//draw_text(x,y-6,"xscale: " + string(oPlayer.image_xscale));
//draw_text(x,y,"ang: " + string(mouseAngle));
//draw_text(x,y-14,"state: " + string(playerState));
//draw_text(x,y-28,"ii: " + string(image_index));
if(equippedWeapon) draw_text(x,y,"eW: " + string(equippedWeapon.equippedSprite));
//draw_text(32,256,"collideLedge: " + string(place_meeting(x+sign(image_xscale)*1,y,oLedge)));


//draw_set_color(c_white);
//draw_line(x - (oPlayer.image_xscale * 3),y-6,x+lengthdir_x(100, mouseAngle),y+lengthdir_y(100, mouseAngle));
//draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
